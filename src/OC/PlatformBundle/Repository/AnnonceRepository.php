<?php
// src/OC/PlatformBundle/Repository/AnnonceRepository.php

namespace OC\PlatformBundle\Repository;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends \Doctrine\ORM\EntityRepository
{
	function getAnnonce (){
		
		$qb = $this->createQueryBuilder('a');
		$qb 
			->orderBy('a.datecreation','DESC')
			->where ('a.datecreation >= :date')
			->setParameter('date', new \DateTime('-2 month'))
			;
		
		
		return $qb->getQuery()
				->getResult();
	}
	
	function getAnnonceByEmp($id){
		$qb = $this->createQueryBuilder('a');
		$qb 
			->orderBy('a.datecreation','DESC')
			->where ('a.idEmployeur = :id')
			->setParameter('id', $id)
			;
		
		
		return $qb
				->getQuery()
				->getResult();
	}
	function getAnnonceEmp($id){
		$qb = $this->createQueryBuilder('a');
		$qb ->join('a.idEmployeur','r')
			->orderBy('a.datecreation','DESC')
			->where ('r.id = :id')
			->setParameter('id', $id)
			->setMaxResults(3)	
			;
		
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	//Affichage de toutes les annonces du recruteur
	function getAnnonceByRecruteur ($id){
		
		$qb = $this->createQueryBuilder('a');
		$qb 
			->orderBy('a.datecreation','DESC')
			->where ('a.idRecruteur = :id')
			->setParameter('id', $id)
			;
		
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	//Affichage des annonces du recruteur MAPAGE
	function getAnnonceRecruteur ($id){
		
		$qb = $this->createQueryBuilder('a');
		$qb ->join('a.idRecruteur','r')
			->orderBy('a.datecreation','DESC')
			->where ('r.id = :id')
			->setParameter('id', $id)
			->setMaxResults(3)	
			;
		
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	//Affichage des annonces du candidat MAPAGE
	function getAnnonceByCandidat($utilisateur){
		$qb = $this->createQueryBuilder('a');
		$qb 
			->orderBy('a.datecreation','DESC')
			->join('a.candidature','c')
			->where ('c.id = :id')
			->setParameter('id', $utilisateur)
			->setMaxResults(3)
			;
		
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	//Affichage de toutes les annonces du candidat
	function getAnnonceCandidature($id){
		$qb = $this->createQueryBuilder('a');
		$qb
			->join('a.candidature', 'c')
			->where('c.id = :id')
			->setParameter('id', $id);
		return $qb->getQuery()
				->getResult();
	}
	
	function getUneAnnonce ($id){
		$qb = $this->createQueryBuilder('a');
		$qb 
			->where('a.id = :id')
			->setParameter('id', $id)
			;	
		return $qb
				->getQuery()
				->getResult();
	}
	
	function getSuspension($nb,$date,$premium,$site,$departement){
		
		$qb = $this->createQueryBuilder('a');
		$qb
				->where ('a.datecreation >= :date')
				->setParameter('date', new \DateTime('-2 month'));
		
		if($nb != null && $date != null && $premium != null && $site != null && $departement != null)
		{
				$qb->andWhere('a.suspension = :id')
					->setParameter('id', $nb)
					->join('a.site','s')
					->andWhere('s.idSiteemploi = :site')
					->setParameter('site', $site)
					->andWhere('a.idDepartement = :dept')
					->setParameter('dept', $departement)	
					->andWhere('a.premium = :premium')
					->setParameter('premium', $premium)		
					->orderBy('a.datecreation',$date);
		}else{
			if($nb != null){
				$qb->andWhere('a.suspension = :id')
					->setParameter('id', $nb);
			}
			if($date != null){
				$qb->orderBy('a.datecreation',$date);
			}
			if($premium != null){
				$qb->andWhere('a.premium = :premium')
				->setParameter('premium', $premium);		
			}
			if($site != null){
				$qb->join('a.site','s')
						->andWhere('s.idSiteemploi = :site')
				->setParameter('site', $site);		
			}
			if($departement != null){
				$qb->andWhere('a.idDepartement = :dept')
				->setParameter('dept', $departement);		
			}
		}
		
		return $qb->getQuery()
				->getResult();
	}
	
	function getSite($nb,$dept,$type){
		
		$qb = $this->createQueryBuilder('a');
		$qb
			->where ('a.datecreation >= :date')
			->setParameter('date', new \DateTime('-2 month'))
			->andWhere('a.suspension = :id2')
			->setParameter('id2', 10)
			->orderBy('a.datepublication','DESC')
			->addOrderBy('a.premium','DESC');
		if($nb != null && $dept != null && $type != null){
			$qb->join('a.site','s')
			->andWhere('s.idSiteemploi = :id')
			->setParameter('id', $nb)
			->andWhere('a.idDepartement = :dept')
			->setParameter('dept', $dept)
			->andWhere('a.idTypecontrat = :type')
			->setParameter('type', $type)
				
					
			;
		}else{
			if($nb != null){
				$qb->join('a.site','s')
					->andWhere('s.idSiteemploi = :id')
					->setParameter('id', $nb);
			}
			
			if($dept != null){
				$qb->andWhere('a.idDepartement = :dept')
					->setParameter('dept', $dept);
			}
			
			if($type != null){
				$qb->andWhere('a.idTypecontrat = :type')
					->setParameter('type', $type);
			}
		}
		
		
		
		return $qb->getQuery()
				->getResult();
	}
	
	function getRecherche($recherche){
		$qb = $this->createQueryBuilder('a');
		$qb
			->where('a.id LIKE :id')
			->setParameter('id', $recherche)
			;
		
		return $qb->getQuery()
				->getResult();
	}
	
	function getFonction(){
		
		$qb = $this->createQueryBuilder('a');
		$qb
			->addOrderBy('a.intitulefonction','ASC')	
			;
		
		return $qb;
	}
	
	function getIdFonction(){
		$qb = $this->createQueryBuilder('a');
		$qb
			->join('a.fonction', 'f')
			->addSelect('t.idSiteEmploi');
		return $qb->getQuery()
				->getResult();
	}

	function getFonctionBySite($idSite){
		$site = 0;
		foreach ($site as $idSite){
		$qb = $this->createQueryBuilder('a');
		$qb
			->where('idSiteEmploi = :idSite')
			->setParameter('idSite', $site);
		}
		return $qb->getQuery()
				->getResult();
	}
	
	function getAnnonceDoublon($mail,$reference){
		$qb = $this->createQueryBuilder('a');
		$qb 
			->join('a.idRecruteur','r')
			->join('r.user','u')	
			->where('u.email = :mail')
			->setParameter('mail', $mail)
			->andWhere('a.referencerecruteur = :reference')
			->setParameter('reference', $reference)
			;
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	function getFonctionWS($id){
		$qb = $this->createQueryBuilder('a');
		$qb ->where('a.intitulefonction = :id')
				->setParameter('id', $id);
		
		return $qb
				->getQuery()
				->getResult();
	}
	
	function getFonctionAdmin($id,$nb){
		
		$qb = $this->createQueryBuilder('a');
		$qb
			->join('a.fonction','f')
			->where('f.idFonction = :id')
			->setParameter('id', $id)
			;
		
		if($nb != null){
			$qb->andWhere('a.dateMAJ < :date or a.dateMAJ = :nb')
			->setParameter('date', new \DateTime('-30days'))
			->setParameter('nb', null);
		}
		
		return $qb->getQuery()
				->getResult();
	}
	
	function getFonctionAdminNum($id,$nb){
		
		$qb = $this->createQueryBuilder('a');
		$qb ->select('count(a.id)')
			->join('a.fonction','f')
			->where('f.idFonction = :id')
			->setParameter('id', $id)
			;
		
		if($nb != null){
			$qb->andWhere('a.dateMAJ < :date or a.dateMAJ = :nb')
			->setParameter('date', new \DateTime('-30days'))
			->setParameter('nb', null);
		}
		
		return $qb->getQuery()
				->getSingleScalarResult();
	}
	
	
	
}

//SELECT annonce.id FROM `annonce`,annonce_sy_siteemploi WHERE id_fonction_id = 199 and dateMAJ > '2017-07-13' 
